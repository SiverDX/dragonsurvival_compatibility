buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = minecraft_version + "-" + mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir { dirs "libs" } // Local
    maven { url "https://jitpack.io" } // Mixin Squared
    maven { url "https://cursemaven.com" } // CurseForge
    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" } // GeckoLib
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Core
    implementation fg.deobf("libs:dragonsurvival:${dragonsurvival_version}")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_mc_version}:${geckolib_version}")

    // # --- Mods --- #
    // Cold Sweat
    implementation fg.deobf("curse.maven:cold-sweat-506194:4900456") // 1.19.2 - 2.2.2

    // Jade Support
    compileOnly fg.deobf("curse.maven:jade-324717:4719987") // 1.19.1 - 8.9.0

    // WTHIT Harvestability Support
    compileOnly fg.deobf("curse.maven:wthit-forge-455982:4576229") // 1.19.2 - 5.16.2
    compileOnly fg.deobf("curse.maven:wthit-harvestability-666621:3960349") // 1.19.2 - 2.1.0

    // Player Animator (for Better Combat)
    compileOnly fg.deobf("curse.maven:playeranimator-658587:4418149") // 1.19.2 - 1.0.2

    // Upgraded Netherite
    compileOnly fg.deobf("curse.maven:upgraded-netherite-400085:4536108") // 1.19.2 - 5.1.0.9
    compileOnly fg.deobf("curse.maven:upgraded-core-566700:4411903") // 1.19.2 - 4.1.0.1

    // Puffish Skills
    compileOnly fg.deobf("curse.maven:puffish-skills-835091:4744360") // 1.19.2 - 0.9.0

    // Raised
    compileOnly fg.deobf("curse.maven:raised-570368:4645314") // 1.19.2 - 2.0.0

    // Forbidden and Arcanus
    compileOnly fg.deobf("curse.maven:forbidden-arcanus-309858:4512412") // 1.19.2 - 2.1.3
    compileOnly fg.deobf("curse.maven:valhelsia-core-416935:4181245") // 1.19.2 - 0.5.0

    // Apotheosis
    compileOnly fg.deobf("curse.maven:apotheosis-313970:4730358") // 1.19.2 - 6.4.0
    compileOnly fg.deobf("curse.maven:placebo-283644:4759853") // 1.19.2 - 7.3.3

    /* --- Mixin Configuration --- */
    implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:${mixin_squared_version}"))
    implementation(jarJar("com.github.bawnorton.mixinsquared:mixinsquared-forge:${mixin_squared_version}")) {
        jarJar.ranged(it, "[${mixin_squared_version},)")
    }

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']

def replaceProperties = [
        minecraft_version: minecraft_version,
        minecraft_version_range: minecraft_version_range,
        forge_version: forge_version,
        forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id,
        mod_name: mod_name,
        mod_license: mod_license,
        mod_version: mod_version,
        mod_authors: mod_authors,
        mod_description: mod_description,
        dragonsurvival_version_range: dragonsurvival_version_range
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
